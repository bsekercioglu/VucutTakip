rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to create admin collection if it doesn't exist
    match /admins/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
      // Allow creation of first admin if collection is empty
      allow create: if request.auth != null && 
        request.auth.uid == adminId &&
        !exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily records - users can only access their own records
    match /dailyRecords/{recordId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
    }
    
    // Daily tracking - users can only access their own tracking data
    match /dailyTracking/{trackingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
    }
    
    // Questions - users can only access their own questions
    match /questions/{questionId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
    }
    
    // Admin collection
    // Allow admins to read all users for management
    match /users/{userId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Sponsor teams
    match /sponsorTeams/{teamId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.sponsorId == request.auth.uid || 
         resource.data.memberId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Orders
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Product recommendations
    match /productRecommendations/{recId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Sponsor messages
    match /sponsorMessages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Enhanced consultant access to questions
    match /questions/{questionId} {
      allow read, update: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}