rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Admin collection - strict access control
    match /admins/{adminId} {
      // Allow reading own admin document or if user is admin
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == adminId);
      
      // Allow listing all admin documents if user is admin
      allow list: if isAdmin();
      
      // Allow creation if user is authenticated (for first admin) or if user is admin
      allow create: if request.auth != null;
      
      // Only admins can update admin documents
      allow update: if isAdmin();
      
      // Only admins can delete admin documents
      allow delete: if isAdmin();
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Admins can read all users for management
      allow read: if isAdmin();
      
      // Allow admins to list all users for management purposes
      allow list: if isAdmin();
    }
    
    // Daily records - users can only access their own records
    match /dailyRecords/{recordId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
      
      // Allow listing own records
      allow list: if request.auth != null;
    }
    
    // Daily tracking - users can only access their own tracking data
    match /dailyTracking/{trackingId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
      
      // Allow listing own tracking data
      allow list: if request.auth != null;
    }
    
    // Questions - users can only access their own questions
    match /questions/{questionId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid) &&
        (request.resource == null || request.resource.data.userId == request.auth.uid);
      
      // Admins can read and update all questions for consultation
      allow read, update: if isAdmin();
    }
    
    // Sponsor teams
    match /sponsorTeams/{teamId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.sponsorId == request.auth.uid || 
         resource.data.memberId == request.auth.uid ||
         isAdmin());
    }
    
    // Orders
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         isAdmin());
    }
    
    // Product recommendations
    match /productRecommendations/{recId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         isAdmin());
    }
    
    // Sponsor messages
    match /sponsorMessages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.userId == request.auth.uid || 
         resource.data.sponsorId == request.auth.uid ||
         isAdmin());
    }

    // Invitations collection
    match /invitations/{invitationId} {
      // Only admins and sponsors can create invitations
      allow create: if isAdmin() || (request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin', 'sponsor']);
      
      // Anyone can read invitations (for registration)
      allow read: if true;
      
      // Only admins and the creator can update/delete invitations
      allow update, delete: if isAdmin() || (request.auth != null && 
        resource.data.invitedBy == request.auth.uid);
    }

    // User Roles collection
    match /userRoles/{roleId} {
      // Only admins can manage roles
      allow read, write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}